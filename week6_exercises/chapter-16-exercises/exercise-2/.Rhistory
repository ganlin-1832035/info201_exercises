ggplot(data = midwest) +
geom_col(mapping = aes(x = state, y = poptotal))
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
# ggplot:
## install.packages("ggplot2")
install.packages("stat_binhex")
ggplot(data = midwest) +
geom_hex(mapping = aes(x = percollege, y = percadultpoverty))
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(dplyr)
library(ggplot2)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
nrowd(diamonds)
nrow(diamonds)
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
?sample_n
diamonds_sample <- sample_n(diamonds, 1000)
ggplot(data = diamonds_sample)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = price
color = clarity)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = price,
color = clarity)
)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat,
y = price,
color = clarity)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = price,
color = clarity)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = price,
color = blue)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = price,
color = "blue")
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = price),
color = blue
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = price),
color = "blue"
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = price,
shape = cut)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = price,
shape = cut)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = price,
shape = cut)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = cut(),
size = price)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = cut,
size = price)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = cut,
shape = cute
size = price)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = cut,
shape = cut,
size = price)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = cut,
size = price)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = cut,
size = price
color = price)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = cut,
size = price,
color = price)
)
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat,
y = price,
color = cut)
)
# That's kind of messy. Try using `smooth` geometry instead.
?smooth
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = cut,
size = price)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = cut,
size = price,
color = price)
)
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat,
y = price,
color = cut)
)
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut, y = price))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut,
y = price,
fill = clarity))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut,
y = price,
color = clarity))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = cut,
y = price,
fill = clarity))
#=========================================#
# scales: use this to determine the range of values data should map to (replacing the default)
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty, color = state)) +
scale_x_reverse() +
scale_y_continuous(limits = c(0, 40)) + # explicitly set a continuous scale for the y-axis
scale_color_hue(l = 70, c = 30) # custom color scale
color = state) +
y = peradultpoverty,
#=========================================#
# scales: use this to determine the range of values data should map to (replacing the default)
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege,
y = peradultpoverty,
color = state)) +
scale_x_reverse() +
scale_y_continuous(limits = c(0, 40)) + # explicitly set a continuous scale for the y-axis
scale_color_hue(l = 70, c = 30) # custom color scale
#=========================================#
# scales: use this to determine the range of values data should map to (replacing the default)
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege,
y = percadultpoverty,
color = state)) +
scale_x_reverse() +
scale_y_continuous(limits = c(0, 40)) + # explicitly set a continuous scale for the y-axis
scale_color_hue(l = 70, c = 30) # custom color scale
#=========================================#
# scales: use this to determine the range of values data should map to (replacing the default)
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege,
y = percadultpoverty,
color = state)) +
scale_x_reverse() +
scale_y_continuous(limits = c(0, 40)) + # explicitly set a continuous scale for the y-axis
scale_color_brewer(platter = "set 3")
#=========================================#
# scales: use this to determine the range of values data should map to (replacing the default)
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege,
y = percadultpoverty,
color = state)) +
scale_x_reverse() +
scale_y_continuous(limits = c(0, 40)) + # explicitly set a continuous scale for the y-axis
scale_color_brewer(palette = "set 3")
#=========================================#
# scales: use this to determine the range of values data should map to (replacing the default)
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege,
y = percadultpoverty,
color = state)) +
scale_x_reverse() +
scale_y_continuous(limits = c(0, 40)) + # explicitly set a continuous scale for the y-axis
scale_color_brewer(palette = "PuOr")
# Create a better label for the `inmetro` column
labeled <- midwest %>%
mutate(location = if_else(inmetro == 0, "Rural", "Urban"))
# Create the same chart as Figure 16.9, faceted by state
ggplot(data = labeled) +
geom_point(
mapping = aes(x = percollege, y = percadultpoverty, color = location),
alpha = .6
) +
facet_wrap(~state) # pass the `state` column as a *fomula* to `facet_wrap()` (group them by state)
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
# Install and load the `ggplot2` package
#install.packages('ggplot2')
library("ggplot2")
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(mapping = aes(x = price,
y = cut,
fill = clarity)
)
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color,
y = price)
)
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price))
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
ggplot(data = diamonds_sample) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
ggplot(data = diamonds_sample) +
geom_bin2d(mapping = aes(x = color, y = price))
ggplot(data = diamonds_sample) +
geom_bin2d(mapping = aes(x = color, y = price)) +
scale_x_log10() +
scale_y_log10()
ggplot(data = diamonds_sample) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
scale_x_log10() +
scale_y_log10()
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Purples")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Purples", direction = -1) # goes from dark to light
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(~color)
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `color`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
facet_wrap(~cut)
# What kind of data structure did this produce? A data frame? A list?
is.data.frame(data)
is.list(data)
is.vector(data)
# load relevant libraries
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R") # go to that that file, select all, and hit ctrl-enter
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Avengers"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
resource <- "reviews/search.json"
uri <- paste0(base_uri, resource)
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
# What else do I need in order to get the access
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params)
orbody <- content(response, "text")
data <- fromJSON(body)
source('~/Desktop/Info_201/info201_exercises/book-exercises/chapter-18-exercises/exercise-1/exercise.R', echo=TRUE)
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
resource <- "reviews/search.json"
uri <- paste0(base_uri, resource)
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
setwd("~/Desktop/Info_201/info201_exercises/book-exercises/chapter-18-exercises/exercise-1")
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
source("apikey.R") # go to that that file, select all, and hit ctrl-enter
movie_name <- "Avengers"
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
response <- GET(uri, query = query_params)
orbody <- content(response, "text")
data <- fromJSON(body)
data <- fromJSON(orbody)
# What kind of data structure did this produce? A data frame? A list?
is.data.frame(data)
is.list(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
data
reviews <- flatten(data)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
result <- data$results
reviews <- flatten(data)
reviews <- flatten(result)
review_list <- select(reviews, headline, summary-short,link.url)
review_list <- select(reviews, headline, summary_short,link.url)
# Create a list of the three pieces of information from above.
# Print out the list.
print(review_list)
ggplot(data = diamonds_sample) +
geom_point(x = carat, y = price) +
geom_smooth(x = carat, y = price, color = cut)
source('~/Desktop/Info_201/info201_exercises/book-exercises/chapter-16-exercises/exercise-1/exercise.R', echo=TRUE)
ggplot(data = diamonds_sample) +
geom_point(x = carat, y = price) +
geom_smooth(x = carat, y = price, color = cut)
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(dplyr)
library(ggplot2)
nrow(diamonds)
diamonds_sample <- sample_n(diamonds, 1000)
ggplot(data = diamonds_sample)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat,
y = price,
color = clarity)
)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat,
y = price,
color = clarity)
)
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat,
y = price,
color = cut)
)
ggplot(data = diamonds_sample) +
geom_point(x = carat, y = price) +
geom_smooth(x = carat, y = price, color = cut)
ggplot(data = diamonds_sample) +
geom_point(x = carat, y = price) +
geom_smooth(cut)
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat,
y = price,
color = cut)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price)) +
geom_smooth(mapping = aes(x = carat,
y = price,
color = cut)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, alpha = 0.3)) +
geom_smooth(mapping = aes(x = carat,
y = price,
color = cut)
)
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(mapping = aes(x = price,
y = cut,
fill = clarity)
)
ggplot(data = diamonds) +
geom_col(mapping = aes(x = price,
y = cut,
fill = clarity)
) +
position_fill(vjust = y)
ggplot(data = diamonds) +
geom_col(mapping = aes(x = price,
y = cut,
fill = clarity)
) +
position_fill(vjust = cut)
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = price,
y = cut,
fill = clarity)
)
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = price,
y = cut,
fill = clarity)
) +
# Draw the same chart again, but with each element positioned to "dodge" each other
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
## Scales
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = color, y = price))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = price,
y = cut,
fill = cut)
), position = "fill"
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = price,
y = cut,
fill = cut), position = "fill"
)
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = price,
y = cut,
fill = cut), position = "dodge"
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = cut,
y = clarity)
)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut,
y = clarity), position = "jitter"
)
setwd("~/Desktop/Info_201/info201_exercises/book-exercises/chapter-16-exercises/exercise-2")
ggplot(data = diamonds_sample) +
geom_bar(theta = "x", width = 1)
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut), color = cut)
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, color = cut))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = cut))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = cut), width = 1)
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = cut), width = 1, direction = -1)
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = cut), width = 1) +
coord_flip()
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = cut), width = 1) +
coord_polar()
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = cut), width = 1) +
coord_flip() +
coord_polar()
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = cut), width = 1) +
coord_polar()
# Take the scatter plot of price by carat data (colored by clarity) and add
# _facets_ based on the diamond's `cut`
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y  = price, color = clarity)) +
facet_wrap(~cut)
# Use the `ggsave()` function to save the current (recent) plot to disk.
ggsave()
setwd("~/Desktop/Info_201/info201_exercises/book-exercises/chapter-16-exercises/exercise-2")
# Use the `ggsave()` function to save the current (recent) plot to disk.
# Name the output file "my-plot.png".
ggsave("my-plot.png")
