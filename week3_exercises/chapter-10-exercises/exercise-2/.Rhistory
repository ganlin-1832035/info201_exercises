library(mosaic)
set.seed(111)
drugA <- rnorm(10000, -2.1, 1)
drugB <- shuffle(drugA)
set.seed(200)
pvals <- rep(0, 100000)
lower.bounds <- rep(0,100000)
upper.bounds <- rep(0,100000)
for (i in 1:100000) {
sampleA <- sample(drugA, size=20)
sampleB <- sample(drugB, size=20)
test <- t.test(sampleA, sampleB, mu=0, alternative="two.sided", paired=FALSE, conf.level=0.95)
pvals[i] <- test$p.value
lower.bounds[i] <- test$conf.int[1]
upper.bounds[i] <- test$conf.int[2]
}
ptotal <- sum(pvals < 0.05)
ptotal/100000
set.seed(222)
pvals <- rep(0, 100000)
lower.bounds <- rep(0,100000)
upper.bounds <- rep(0,100000)
for (i in 1:100000) {
sampleB <- sample(drugB, size=200)
test <- t.test(sampleA, sampleB, mu=0, alternative="two.sided", paired=FALSE, conf.level=0.95)
pvals[i] <- test$p.value
lower.bounds[i] <- test$conf.int[1]
upp
for (i in 1:100000) {
sampleA <- sample(drugA, size=200)
sampleB <- sample(drugB, size=200)
test <- t.test(sampleA, sampleB, mu=0, alternative="two.sided", paired=FALSE, conf.level=0.95)
pvals[i] <- test$p.value
lower.bounds[i] <- test$conf.int[1]
upper.bounds[i] <- test$conf.int[2]
}
set.seed(222)
pvals <- rep(0, 100000)
lower.bounds <- rep(0,100000)
upper.bounds <- rep(0,100000)
for (i in 1:100000) {
sampleA <- sample(drugA, size=200)
sampleB <- sample(drugB, size=200)
test <- t.test(sampleA, sampleB, mu=0, alternative="two.sided", paired=FALSE, conf.level=0.95)
pvals[i] <- test$p.value
lower.bounds[i] <- test$conf.int[1]
upper.bounds[i] <- test$conf.int[2]
}
ptotal <- sum(pvals < 0.05)
ptotal/100000
source('~/.active-rstudio-document')
library(mosaic)
set.seed(111)
drugA <- rnorm(10000, -2.1, 1)
drugB <- shuffle(drugA)
set.seed(200)
pvals <- rep(0, 100000)
lower.bounds <- rep(0,100000)
upper.bounds <- rep(0,100000)
for (i in 1:100000) {
sampleA <- sample(drugA, size=20)
sampleB <- sample(drugB, size=20)
test <- t.test(sampleA, sampleB, mu=0, alternative="two.sided", paired=FALSE, conf.level=0.95)
pvals[i] <- test$p.value
lower.bounds[i] <- test$conf.int[1]
upper.bounds[i] <- test$conf.int[2]
}
ptotal <- sum(pvals < 0.05)
ptotal/100000
for (i in 1:100000) {
sampleA <- sample(drugA, size=20)
sampleB <- sample(drugB, size=20)
test <- t.test(sampleA, sampleB, mu=0, alternative="two.sided", paired=FALSE, conf.level=0.95)
pvals[i] <- test$p.value
lower.bounds[i] <- test$conf.int[1]
upper.bounds[i] <- test$conf.int[2]
}
ptotal <- sum(pvals < 0.05)
ptotal/100000
failzero <- sum(lower.bounds > 0 | upper.bounds < 0)
failzero/100000
library(mosaic)
set.seed(222)
drugA <- rnorm(10000, -2.1, 1)
drugB <- shuffle(drugA)
set.seed(200)
pvals <- rep(0, 100000)
lower.bounds <- rep(0,100000)
upper.bounds <- rep(0,100000)
for (i in 1:100000) {
sampleA <- sample(drugA, size=20)
sampleB <- sample(drugB, size=20)
test <- t.test(sampleA, sampleB, mu=0, alternative="two.sided", paired=FALSE, conf.level=0.95)
pvals[i] <- test$p.value
lower.bounds[i] <- test$conf.int[1]
upper.bounds[i] <- test$conf.int[2]
}
ptotal <- sum(pvals < 0.05)
ptotal/100000
library(mosaic)
set.seed(111)
drugA <- rnorm(10000, -2.1, 1)
drugB <- shuffle(drugA)
set.seed(222)
pvals <- rep(0, 100000)
lower.bounds <- rep(0,100000)
upper.bounds <- rep(0,100000)
for (i in 1:100000) {
sampleA <- sample(drugA, size=20)
sampleB <- sample(drugB, size=20)
test <- t.test(sampleA, sampleB, mu=0, alternative="two.sided", paired=FALSE, conf.level=0.95)
pvals[i] <- test$p.value
lower.bounds[i] <- test$conf.int[1]
upper.bounds[i] <- test$conf.int[2]
}
ptotal <- sum(pvals < 0.05)
ptotal/100000
set.seed(222)
pvals <- rep(0, 100000)
lower.bounds <- rep(0,100000)
upper.bounds <- rep(0,100000)
for (i in 1:100000) {
sampleA <- sample(drugA, size=200)
sampleB <- sample(drugB, size=200)
test <- t.test(sampleA, sampleB, mu=0, alternative="two.sided", paired=FALSE, conf.level=0.95)
pvals[i] <- test$p.value
lower.bounds[i] <- test$conf.int[1]
upper.bounds[i] <- test$conf.int[2]
}
ptotal <- sum(pvals < 0.05)
ptotal/100000
set.seed(222)
pvals <- rep(0, 100000)
lower.bounds <- rep(0,100000)
upper.bounds <- rep(0,100000)
for (i in 1:100000) {
sampleA <- sample(drugAnew, size=20)
sampleB <- sample(drugBnew, size=20)
test <- t.test(sampleA, sampleB, mu=0, alternative="two.sided", paired=FALSE, conf.level=0.95)
pvals[i] <- test$p.value
lower.bounds[i] <- test$conf.int[1]
upper.bounds[i] <- test$conf.int[2]
}
set.seed(111)
drugAnew <- rnorm(10000, -2.1, 1)
drugBnew <- rnorm(10000, -2.6, 1)
set.seed(222)
pvals <- rep(0, 100000)
lower.bounds <- rep(0,100000)
upper.bounds <- rep(0,100000)
for (i in 1:100000) {
sampleA <- sample(drugAnew, size=20)
sampleB <- sample(drugBnew, size=20)
test <- t.test(sampleA, sampleB, mu=0, alternative="two.sided", paired=FALSE, conf.level=0.95)
pvals[i] <- test$p.value
lower.bounds[i] <- test$conf.int[1]
upper.bounds[i] <- test$conf.int[2]
}
sum(pvals > 0.05) / 100000
hist(pvals)
set.seed(222)
pvals <- rep(0, 100000)
lower.bounds <- rep(0,100000)
upper.bounds <- rep(0,100000)
for (i in 1:100000) {
sampleA <- sample(drugAnew, size=200)
sampleB <- sample(drugBnew, size=200)
test <- t.test(sampleA, sampleB, mu=0, alternative="two.sided", paired=FALSE, conf.level=0.95)
pvals[i] <- test$p.value
lower.bounds[i] <- test$conf.int[1]
upper.bounds[i] <- test$conf.int[2]
}
sum(pvals > 0.05)
1 - (sum(pvals > 0.05) / 100000)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("BSDA")
install.packages("BSDA")
library(BSDA)
detach("package:BSDA", unload = TRUE)
library(BSDA)
john -> 20
#This
source('~/Desktop/Info_201/Lecture_2-1.R')
# You can tell the computer to do Math:
2 + 0 + 1
source('~/Desktop/Info_201/Lecture_2-1.R')
source('~/Desktop/Info_201/Lecture_2-1.R')
# You can tell the computer to do Math:
2 + 0 + 1
# Printing: Print whatever is in the p
print("Hello World!")
#    Variable    Value
print(my_num)
#Variables: A label that refers to a value(data)
my_num  <-  201
#Variables: A label that refers to a value(data)
my_num  <-  201
# You can use variables to do calculations
my_num + 7
# You can use variables to do calculations
my_secondNum <- my_num + 7
source('~/Desktop/Info_201/Lecture_2-1.R')
35 * 12
print("HELLO IT'S ME)
(HAHAHAHAHA")
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Guiyang"
# Assign your name to the variable `my_name`
my_name <- "Larry Tian"
# Assign your height (in inches) to a variable `my_height`
my_height <- 5.8
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 3
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- "They are priceless"
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- "infinite amount of dollars"
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
greaterNum <- 1100
source('~/Desktop/Info_201/book-exercises/chapter-05-exercises/exercise-1/exercise.R')
# Assign your height (in inches) to a variable `my_height`
my_height <- 68
nchar("NUMBERS")
# In-class example:
ernings_in_dollars <- 150
hours_worked <- 10
source('~/Desktop/Info_201/Info 201 Lecture_2-1.R')
source('~/Desktop/Info_201/Info 201 Lecture_2-1.R')
source('~/Desktop/Info_201/Info 201 Lecture_2-1.R')
source('~/Desktop/Info_201/Info 201 Lecture_2-1.R')
# Boolean statement: will return TRUE or FALSE
pay_rate < 1500
source('~/Desktop/Info_201/Info 201 Lecture_2-1.R')
source('~/Desktop/Info_201/Info 201 Lecture_2-1.R')
source('~/Desktop/Info_201/Info 201 Lecture_2-1.R')
source('~/Desktop/Info_201/Info 201 Lecture_2-1.R')
source('~/Desktop/Info_201/Info 201 Lecture_2-1.R')
source('~/Desktop/Info_201/Info 201 Lecture_2-1.R')
source('~/Desktop/Info_201/Info 201 Lecture_2-1.R')
# Function arguments are the "inputs".
# There can be multiple arguments, and separated by comma
paste("Hello", "World", "You rock")
# Create a variable `my_name` that contains your name
my_name <- "Larry Tian"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <= nchar(my_name)
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- my_name + " is programming!"
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, " is programming!")
# Make the `now_doing` variable upper case
now_doingUpper <- uppercase(now_doing)
# Make the `now_doing` variable upper case
now_doingUpper <- toupper(now_doing)
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 19
fav_2 <- 36
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
fav_2 <- fav_2 / sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- round_1 + round_2
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
bigger_sum <- max(sum_round, round_sum)
lyric <- paste("I", "like", "to", "eat", "apples", "and", "bananas")
print(lyric)
intro <- substr(lyric, 1, 13)
source('~/Desktop/Info_201/book-exercises/chapter-06-exercises/exercise-2/exercise.R')
fruits <- substr(lyric, 15, nchar(lyric))
?gsub
fruits_e <- gsub("a", "ee", fruits)
fruits_o <- gsub("a", "o", fruits)
lyric_e <- paste(intro, fruits_e)
print(paste(intro, fruits_o))
say_hello <- function(name) {
greeting <- paste("Hello", name)
print(greeting)
}
say_hello("Class")
add_three <- function(input){
answer <- input + 3
return(answer)
}
ten <- add_three(7)
imperial_to_metric <- function(feet, inches) {
meters <- feet / 3.28 + inches / 39.37
}
height_in_meters <- imperial_to_metric(5, 8)
imperial_to_metric <- function(feet, inches) {
meters <- feet / 3.28084 + inches / 39.3701
}
height_in_meters <- imperial_to_metric(5, 8)
imperial_to_metric <- function(feet, inches) {
meters <- feet / 3.28084 + inches / 39.3701
return(meters)
}
height_in_meters <- imperial_to_metric(5, 9)
dogs <- c("Fido", "Sparky", "Spot")
print(dogs)
hundred_nums <- 1:100
print(hundred_nums)
v1 <- c(3, 1, 4, 5, 2)
v2 <- c(1, 6, 1, 8, 0)
v3 <- v1 + v2
v4 <- c(3, 1, 4, 1, 5)
v5 <- c(10, 100)
v6 <- v4 + v5
我
我 <- 250
letters <- c("red", "green", "blue")
upper_case <- toupper(letters)
names <- c("Larry", "Daniel", "Huiran")
names <- c("Larry", "Daniel", "Huiran")
print(names)
n <- 10:49
number_n <- length(n)
print(n+1)
m <- 10:1
m <- c(seq(10,1))
?seq
z <- n - m
x_range <- c(seq(-5, 10, 0.1))
sin_wave <- sin(x_range)
cos_wave <- cos(x_range)
wave <- sin_wave * cos_wave
answer_wave <- sin_wave + wave
plot(answer_wave)
wave <- sin_wave * cos_wave + sin_wave
plot(wave)
vowels <- c('a', 'e', 'i', 'o', 'u')
vowels <- c('a', 'e', 'i', 'o', 'u')
first_vowel <- vowels[1]
first_vowel <- vowels[1]     ## a
print(vowels[4])
print(vowels[1+2])
print(vowels[c(1,2)])
filter <- c(TRUE, FALSE, FALSE, TRUE, TRUE)
vowels[filter]
vowels[!filter]
shoe_sizes <- c(5.5, 11, 7, 8, 4)
shoe_is_small <- shoe_sizes < 6
small_shoes <- shoe_sizes[shoe_is_small]
print(small_shoes)
source('~/.active-rstudio-document')
course <- list(code= "INFO 201", section = "A", enrolled = 147)
print(course$code)
print(course[[1]])
name <- c("Danny", "Chris", "Ada", "Bob", "Emma")
height <- c(64, 74, 69, 69, 71)
weight <- c(135, 160, 120, 143, 152)
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
print(people)
View(people)
colnames(people) <- c("First_name", "Heights", "Weights")
print(people)
# Gives me the second row, height column
people[2, "height"]
people[2, ]
people[2, "Heights"]
people[people$name == "Ada", "height"]
colnames(people) <- c("first_name", "height", "weight")
people[people$name == "Ada", "height"]
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
colnames(people) <- c("first_name", "height", "weight")
people[2, "Heights"]
people[2, "height"]
print(people)
people$name == "Ada"  # this will give you TRUE or FALSE
people[people$name]   # this will give you a vector
colnames(people) <- c("name", "height", "weight")
people[people$name]   # this will give you a vector
people$name == "Ada"  # this will give you TRUE or FALSE
people[people$name]   # this will give you a vector
people[people$first_name]   # this will give you a vector
people$name == "Ada"  # this will give you TRUE or FALSE
people[people$name == "Ada", "height"]
print(employees)
employees <- paste("Employee", 1:100)
print(employees)
?runif()
salaries_2017 <- runif(100, 40000, 50000)
salaries_2017 <- runif(100, 40000, 50000)
adjustments <- runif(100, -5000, 10000)
salaries <- data.frame(employees, salaries_2017, adjustments)
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
salaries$raise <- c(adjustments > 0)
print(salaries)
salaries$salaries_2018 <- slaries_2017 + adjustments
salaries$salaries_2018 <- salaries_2017 + adjustments
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
print(salaries_2018)
print(salaries)
source('~/Desktop/Info_201/info201_exercises/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
salaries$raise <- c(salaries$adjustments > 0)
print(salaries)
Employee_5 <- salaries[5, "salaries_2018"]
print(Employee_5)
Employee_57 <- salaries[57, "salaries_2018"]
print(Employee_57)
Employee_57 <- salaries["Employee 57", "salaries_2018"]
print(Employee_57)
Employee_57 <- salaries[salaries$employees == "Employee 57", "salaries_2018"]
print(Employee_57)
got_raise <- salaries$adjustments == 0
print(got_raise)
got_raise <- salaries$adjustments == TRUE
print(got_raise)
got_raise <- count(salaries$adjustments == TRUE)
got_raise <- nrow(salaries[salaries$raise == TRUE,])
print(got_raise)
got_raise <- nrow(salaries[salaries$raise == TRUE])
got_raise <- nrow(salaries[salaries$raise == TRUE, ])
print(got_raise)
highest <- max(salareis$adjustments)
highest <- max(salaries$adjustments)
print(highest)
print(lucky_one)
lucky_one <- salaries[ salaries$adjustments == max(salaries$adjustments)]
lucky_one <- salaries[ salaries$adjustments == max(salaries$adjustments),]
print(lucky_one)
lucky_one <- salaries[ salaries$adjustments == max(salaries$adjustments), "adjustments" ]
print(lucky_one)
# What was the dollar value of the highest raise?
biggest_raise <- salaries[ salaries$adjustments == max(salaries$adjustments), "adjustments"]
print(biggest_raise)
# What was the "name" of the employee who received the highest raise?
lucky_one <- salaries[ salaries$adjustments == max(salaries$adjustments), "employees"]
print(lucky_one)
largest_decrease <- salaries[ salaries$adjustments == min(salaries$adjustments), "adjustments"]
print(largest_decrease)
unlucky_one <- salaries[ salaries$adjustments == mix(salaries$adjustments), "employees"]
unlucky_one <- salaries[ salaries$adjustments == min(salaries$adjustments), "employees"]
print(unlucky_one)
avg_salary <- mean(salaries[salaries$adjustments, ]
print(avg_salary)
avg_salary <- mean(salaries[salaries$adjustments]
print(avg_salary)
avg_salary <- mean(salaries$adjustments)
print(avg_salary)
paycut <- salaries[salaries$got_raise == FALSE, "adjustments"]
print(paycut)
paycut <- mean(salaries$adjustments < 0)
print(paycut)
paycut <- mean(salaries[salaries$got_raise == FALSE, ]$adjustments)
print(paycut)
paycut <- mean(salaries[salaries$got_raise == FALSE, "adjustments"])
print(paycut)
debugSource('~/Desktop/Info_201/info201_exercises/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
lucky_one <- salaries[ salaries$adjustments == max(salaries$adjustments), "employees"]
print(lucky_one)
debugSource('~/Desktop/Info_201/info201_exercises/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
paycut <- mean(salaries[salaries$got_raise == FALSE, "adjustments"])
print(paycut)
lucky_one <- salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
print(lucky_one)
paycut <- mean(salaries[salaries$got_raise == FALSE, "adjustments"])
print(paycut)
unlucky_one <- salaries[ salaries$adjustments == min(salaries$adjustments), "employees"]
print(unlucky_one)
largest_decrease <- salaries[ salaries$adjustments == min(salaries$adjustments), "adjustments"]
print(largest_decrease)
avg_salary <- mean(salaries$adjustments)
print(avg_salary)
paycut <- mean(salaries[salaries$got_raise == FALSE, "adjustments"])
print(paycut)
paycut <- mean(salaries[salaries$got_raise == FALSE, "adjustments"])
print(paycut)
paycut <- mean(salaries[salaries$adjustments < 0, "adjustments"])
print(paycut)
paycut <- mean(salaries[salaries$raise == FALSE, "adjustments"])
print(paycut)
salaries.csv <- read.csv("salary.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/Info_201/info201_exercises/week3_exercises/chapter-10-exercises/exercise-2")
salaries.csv <- read.csv("salary.csv", stringsAsFactors = FALSE)
salaries.csv <- read.csv("salary.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/Info_201/info201_exercises/week3_exercises/chapter-10-exercises/exercise-2")
getwd()
salaries.csv <- read.csv("salary.csv", stringsAsFactors = FALSE)
salaries.csv
salaries.csv <- read.csv(file = "salary.csv", stringsAsFactors = FALSE)
?read.csv
read.csv("salary.csv", stringsAsFactors = FALSE)
source('~/Desktop/Info_201/info201_exercises/week3_exercises/chapter-10-exercises/exercise-2/exercise.R')
source('~/Desktop/Info_201/info201_exercises/week3_exercises/chapter-10-exercises/exercise-2/exercise.R')
salaries_csv <- read.csv("salary.csv", stringsAsFactors = FALSE)
salaries.csv <- read.csv("salary.csv", stringsAsFactors = FALSE)
salaries.csv <- write.csv("salary.csv", stringsAsFactors = FALSE)
write.csv(salaries, "salary.csv")
salary.csv <- read.csv("salary.csv", stringsAsFactors = FALSE)
print(salary.csv)
